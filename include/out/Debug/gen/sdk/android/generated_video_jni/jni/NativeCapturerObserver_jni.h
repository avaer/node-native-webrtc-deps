// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/NativeCapturerObserver

#ifndef org_webrtc_NativeCapturerObserver_JNI
#define org_webrtc_NativeCapturerObserver_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_NativeCapturerObserver[];
const char kClassPath_org_webrtc_NativeCapturerObserver[] = "org/webrtc/NativeCapturerObserver";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_webrtc_NativeCapturerObserver_clazz(nullptr);
#ifndef org_webrtc_NativeCapturerObserver_clazz_defined
#define org_webrtc_NativeCapturerObserver_clazz_defined
inline jclass org_webrtc_NativeCapturerObserver_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_NativeCapturerObserver,
      &g_org_webrtc_NativeCapturerObserver_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace  webrtc {
namespace jni {

static void JNI_NativeCapturerObserver_CapturerStarted(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong source,
    jboolean success);

JNI_GENERATOR_EXPORT void Java_org_webrtc_NativeCapturerObserver_nativeCapturerStarted(
    JNIEnv* env,
    jclass jcaller,
    jlong source,
    jboolean success) {
  return JNI_NativeCapturerObserver_CapturerStarted(env, base::android::JavaParamRef<jclass>(env,
      jcaller), source, success);
}

static void JNI_NativeCapturerObserver_CapturerStopped(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong source);

JNI_GENERATOR_EXPORT void Java_org_webrtc_NativeCapturerObserver_nativeCapturerStopped(
    JNIEnv* env,
    jclass jcaller,
    jlong source) {
  return JNI_NativeCapturerObserver_CapturerStopped(env, base::android::JavaParamRef<jclass>(env,
      jcaller), source);
}

static void JNI_NativeCapturerObserver_OnFrameCaptured(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong source,
    jint width,
    jint height,
    jint rotation,
    jlong timestampNs,
    const base::android::JavaParamRef<jobject>& frame);

JNI_GENERATOR_EXPORT void Java_org_webrtc_NativeCapturerObserver_nativeOnFrameCaptured(
    JNIEnv* env,
    jclass jcaller,
    jlong source,
    jint width,
    jint height,
    jint rotation,
    jlong timestampNs,
    jobject frame) {
  return JNI_NativeCapturerObserver_OnFrameCaptured(env, base::android::JavaParamRef<jclass>(env,
      jcaller), source, width, height, rotation, timestampNs,
      base::android::JavaParamRef<jobject>(env, frame));
}


static std::atomic<jmethodID> g_org_webrtc_NativeCapturerObserver_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_NativeCapturerObserver_Constructor(JNIEnv*
    env, jlong nativeSource) {
  CHECK_CLAZZ(env, org_webrtc_NativeCapturerObserver_clazz(env),
      org_webrtc_NativeCapturerObserver_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_NativeCapturerObserver_clazz(env),
          "<init>",
          "(J)V",
          &g_org_webrtc_NativeCapturerObserver_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_NativeCapturerObserver_clazz(env),
          method_id, nativeSource);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace jni
}  // namespace  webrtc

#endif  // org_webrtc_NativeCapturerObserver_JNI
