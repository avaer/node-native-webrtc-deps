// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/VideoEncoder

#ifndef org_webrtc_VideoEncoder_JNI
#define org_webrtc_VideoEncoder_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_VideoEncoder_00024BitrateAllocation[];
const char kClassPath_org_webrtc_VideoEncoder_00024BitrateAllocation[] =
    "org/webrtc/VideoEncoder$BitrateAllocation";

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_VideoEncoder_00024Settings[];
const char kClassPath_org_webrtc_VideoEncoder_00024Settings[] = "org/webrtc/VideoEncoder$Settings";

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_VideoEncoder_00024EncodeInfo[];
const char kClassPath_org_webrtc_VideoEncoder_00024EncodeInfo[] =
    "org/webrtc/VideoEncoder$EncodeInfo";

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_VideoEncoder[];
const char kClassPath_org_webrtc_VideoEncoder[] = "org/webrtc/VideoEncoder";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_webrtc_VideoEncoder_00024BitrateAllocation_clazz(nullptr);
#ifndef org_webrtc_VideoEncoder_00024BitrateAllocation_clazz_defined
#define org_webrtc_VideoEncoder_00024BitrateAllocation_clazz_defined
inline jclass org_webrtc_VideoEncoder_00024BitrateAllocation_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_VideoEncoder_00024BitrateAllocation,
      &g_org_webrtc_VideoEncoder_00024BitrateAllocation_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_webrtc_VideoEncoder_00024Settings_clazz(nullptr);
#ifndef org_webrtc_VideoEncoder_00024Settings_clazz_defined
#define org_webrtc_VideoEncoder_00024Settings_clazz_defined
inline jclass org_webrtc_VideoEncoder_00024Settings_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_VideoEncoder_00024Settings,
      &g_org_webrtc_VideoEncoder_00024Settings_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_webrtc_VideoEncoder_00024EncodeInfo_clazz(nullptr);
#ifndef org_webrtc_VideoEncoder_00024EncodeInfo_clazz_defined
#define org_webrtc_VideoEncoder_00024EncodeInfo_clazz_defined
inline jclass org_webrtc_VideoEncoder_00024EncodeInfo_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_VideoEncoder_00024EncodeInfo,
      &g_org_webrtc_VideoEncoder_00024EncodeInfo_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_webrtc_VideoEncoder_clazz(nullptr);
#ifndef org_webrtc_VideoEncoder_clazz_defined
#define org_webrtc_VideoEncoder_clazz_defined
inline jclass org_webrtc_VideoEncoder_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_VideoEncoder,
      &g_org_webrtc_VideoEncoder_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace  webrtc {
namespace jni {


static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_00024Settings_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Settings_Constructor(JNIEnv* env,
    JniIntWrapper numberOfCores,
    JniIntWrapper width,
    JniIntWrapper height,
    JniIntWrapper startBitrate,
    JniIntWrapper maxFramerate,
    JniIntWrapper numberOfSimulcastStreams,
    jboolean automaticResizeOn) {
  CHECK_CLAZZ(env, org_webrtc_VideoEncoder_00024Settings_clazz(env),
      org_webrtc_VideoEncoder_00024Settings_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_00024Settings_clazz(env),
          "<init>",
          "(IIIIIIZ)V",
          &g_org_webrtc_VideoEncoder_00024Settings_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_VideoEncoder_00024Settings_clazz(env),
          method_id, as_jint(numberOfCores), as_jint(width), as_jint(height), as_jint(startBitrate),
              as_jint(maxFramerate), as_jint(numberOfSimulcastStreams), automaticResizeOn);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_00024EncodeInfo_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_EncodeInfo_Constructor(JNIEnv* env, const
    base::android::JavaRef<jobjectArray>& frameTypes) {
  CHECK_CLAZZ(env, org_webrtc_VideoEncoder_00024EncodeInfo_clazz(env),
      org_webrtc_VideoEncoder_00024EncodeInfo_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_00024EncodeInfo_clazz(env),
          "<init>",
          "([Lorg/webrtc/EncodedImage$FrameType;)V",
          &g_org_webrtc_VideoEncoder_00024EncodeInfo_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_VideoEncoder_00024EncodeInfo_clazz(env),
          method_id, frameTypes.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_00024BitrateAllocation_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_BitrateAllocation_Constructor(JNIEnv* env,
    const base::android::JavaRef<jobjectArray>& bitratesBbs) {
  CHECK_CLAZZ(env, org_webrtc_VideoEncoder_00024BitrateAllocation_clazz(env),
      org_webrtc_VideoEncoder_00024BitrateAllocation_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_00024BitrateAllocation_clazz(env),
          "<init>",
          "([[I)V",
          &g_org_webrtc_VideoEncoder_00024BitrateAllocation_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_VideoEncoder_00024BitrateAllocation_clazz(env),
          method_id, bitratesBbs.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_createNativeVideoEncoder(nullptr);
static jlong Java_VideoEncoder_createNativeVideoEncoder(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoEncoder_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_clazz(env),
          "createNativeVideoEncoder",
          "()J",
          &g_org_webrtc_VideoEncoder_createNativeVideoEncoder);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_isHardwareEncoder(nullptr);
static jboolean Java_VideoEncoder_isHardwareEncoder(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoEncoder_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_clazz(env),
          "isHardwareEncoder",
          "()Z",
          &g_org_webrtc_VideoEncoder_isHardwareEncoder);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_initEncode(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_VideoEncoder_initEncode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& settings,
    const base::android::JavaRef<jobject>& encodeCallback) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoEncoder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_clazz(env),
          "initEncode",
"(Lorg/webrtc/VideoEncoder$Settings;Lorg/webrtc/VideoEncoder$Callback;)Lorg/webrtc/VideoCodecStatus;",
          &g_org_webrtc_VideoEncoder_initEncode);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, settings.obj(), encodeCallback.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_release(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_VideoEncoder_release(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoEncoder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_clazz(env),
          "release",
          "()Lorg/webrtc/VideoCodecStatus;",
          &g_org_webrtc_VideoEncoder_release);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_encode(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_VideoEncoder_encode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& frame,
    const base::android::JavaRef<jobject>& info) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoEncoder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_clazz(env),
          "encode",
"(Lorg/webrtc/VideoFrame;Lorg/webrtc/VideoEncoder$EncodeInfo;)Lorg/webrtc/VideoCodecStatus;",
          &g_org_webrtc_VideoEncoder_encode);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, frame.obj(), info.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_setChannelParameters(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_VideoEncoder_setChannelParameters(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, jshort packetLoss,
    jlong roundTripTimeMs) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoEncoder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_clazz(env),
          "setChannelParameters",
          "(SJ)Lorg/webrtc/VideoCodecStatus;",
          &g_org_webrtc_VideoEncoder_setChannelParameters);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, packetLoss, roundTripTimeMs);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_setRateAllocation(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_VideoEncoder_setRateAllocation(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& allocation,
    JniIntWrapper framerate) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoEncoder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_clazz(env),
          "setRateAllocation",
          "(Lorg/webrtc/VideoEncoder$BitrateAllocation;I)Lorg/webrtc/VideoCodecStatus;",
          &g_org_webrtc_VideoEncoder_setRateAllocation);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, allocation.obj(), as_jint(framerate));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_getScalingSettings(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_VideoEncoder_getScalingSettings(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoEncoder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_clazz(env),
          "getScalingSettings",
          "()Lorg/webrtc/VideoEncoder$ScalingSettings;",
          &g_org_webrtc_VideoEncoder_getScalingSettings);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_VideoEncoder_getImplementationName(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_VideoEncoder_getImplementationName(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoEncoder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_VideoEncoder_clazz(env),
          "getImplementationName",
          "()Ljava/lang/String;",
          &g_org_webrtc_VideoEncoder_getImplementationName);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

}  // namespace jni
}  // namespace  webrtc

#endif  // org_webrtc_VideoEncoder_JNI
