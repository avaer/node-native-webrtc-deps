// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/MediaCodecVideoEncoder

#ifndef org_webrtc_MediaCodecVideoEncoder_JNI
#define org_webrtc_MediaCodecVideoEncoder_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_MediaCodecVideoEncoder[];
const char kClassPath_org_webrtc_MediaCodecVideoEncoder[] = "org/webrtc/MediaCodecVideoEncoder";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo[];
const char kClassPath_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo[] =
    "org/webrtc/MediaCodecVideoEncoder$OutputBufferInfo";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType[];
const char kClassPath_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType[] =
    "org/webrtc/MediaCodecVideoEncoder$VideoCodecType";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_webrtc_MediaCodecVideoEncoder_clazz(nullptr);
#ifndef org_webrtc_MediaCodecVideoEncoder_clazz_defined
#define org_webrtc_MediaCodecVideoEncoder_clazz_defined
inline jclass org_webrtc_MediaCodecVideoEncoder_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_MediaCodecVideoEncoder,
      &g_org_webrtc_MediaCodecVideoEncoder_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(nullptr);
#ifndef org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz_defined
#define org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz_defined
inline jclass org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo,
      &g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz(nullptr);
#ifndef org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz_defined
#define org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz_defined
inline jclass org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType,
      &g_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace  webrtc {
namespace jni {

static void JNI_MediaCodecVideoEncoder_FillInputBuffer(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong encoder,
    jint inputBuffer,
    const base::android::JavaParamRef<jobject>& dataY,
    jint strideY,
    const base::android::JavaParamRef<jobject>& dataU,
    jint strideU,
    const base::android::JavaParamRef<jobject>& dataV,
    jint strideV);

JNI_GENERATOR_EXPORT void Java_org_webrtc_MediaCodecVideoEncoder_nativeFillInputBuffer(
    JNIEnv* env,
    jclass jcaller,
    jlong encoder,
    jint inputBuffer,
    jobject dataY,
    jint strideY,
    jobject dataU,
    jint strideU,
    jobject dataV,
    jint strideV) {
  return JNI_MediaCodecVideoEncoder_FillInputBuffer(env, base::android::JavaParamRef<jclass>(env,
      jcaller), encoder, inputBuffer, base::android::JavaParamRef<jobject>(env, dataY), strideY,
      base::android::JavaParamRef<jobject>(env, dataU), strideU,
      base::android::JavaParamRef<jobject>(env, dataV), strideV);
}

static jlong JNI_MediaCodecVideoEncoder_CreateEncoder(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& info,
    jboolean hasEgl14Context);

JNI_GENERATOR_EXPORT jlong Java_org_webrtc_MediaCodecVideoEncoder_nativeCreateEncoder(
    JNIEnv* env,
    jclass jcaller,
    jobject info,
    jboolean hasEgl14Context) {
  return JNI_MediaCodecVideoEncoder_CreateEncoder(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobject>(env, info), hasEgl14Context);
}


static std::atomic<jmethodID>
    g_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_fromNativeIndex(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_VideoCodecType_fromNativeIndex(JNIEnv* env,
    JniIntWrapper nativeIndex) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz(env),
      org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz(env),
          "fromNativeIndex",
          "(I)Lorg/webrtc/MediaCodecVideoEncoder$VideoCodecType;",
          &g_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_fromNativeIndex);

  jobject ret =
      env->CallStaticObjectMethod(org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz(env),
          method_id, as_jint(nativeIndex));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_MediaCodecVideoEncoder_Constructor(JNIEnv*
    env) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "<init>",
          "()V",
          &g_org_webrtc_MediaCodecVideoEncoder_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_MediaCodecVideoEncoder_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_initEncode(nullptr);
static jboolean Java_MediaCodecVideoEncoder_initEncode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& type,
    JniIntWrapper profile,
    JniIntWrapper width,
    JniIntWrapper height,
    JniIntWrapper kbps,
    JniIntWrapper fps,
    jboolean useSurface) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "initEncode",
          "(Lorg/webrtc/MediaCodecVideoEncoder$VideoCodecType;IIIIIZ)Z",
          &g_org_webrtc_MediaCodecVideoEncoder_initEncode);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, type.obj(), as_jint(profile), as_jint(width), as_jint(height), as_jint(kbps),
              as_jint(fps), useSurface);
  return ret;
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_getInputBuffers(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_MediaCodecVideoEncoder_getInputBuffers(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "getInputBuffers",
          "()[Ljava/nio/ByteBuffer;",
          &g_org_webrtc_MediaCodecVideoEncoder_getInputBuffers);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_encodeBuffer(nullptr);
static jboolean Java_MediaCodecVideoEncoder_encodeBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean isKeyframe,
    JniIntWrapper inputBuffer,
    JniIntWrapper size,
    jlong presentationTimestampUs) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "encodeBuffer",
          "(ZIIJ)Z",
          &g_org_webrtc_MediaCodecVideoEncoder_encodeBuffer);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, isKeyframe, as_jint(inputBuffer), as_jint(size), presentationTimestampUs);
  return ret;
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_encodeFrame(nullptr);
static jboolean Java_MediaCodecVideoEncoder_encodeFrame(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativeEncoder,
    jboolean isKeyframe,
    const base::android::JavaRef<jobject>& frame,
    JniIntWrapper bufferIndex,
    jlong presentationTimestampUs) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "encodeFrame",
          "(JZLorg/webrtc/VideoFrame;IJ)Z",
          &g_org_webrtc_MediaCodecVideoEncoder_encodeFrame);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, nativeEncoder, isKeyframe, frame.obj(), as_jint(bufferIndex),
              presentationTimestampUs);
  return ret;
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_release(nullptr);
static void Java_MediaCodecVideoEncoder_release(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "release",
          "()V",
          &g_org_webrtc_MediaCodecVideoEncoder_release);

     env->CallVoidMethod(obj.obj(),
          method_id);
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_setRates(nullptr);
static jboolean Java_MediaCodecVideoEncoder_setRates(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper kbps,
    JniIntWrapper frameRate) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "setRates",
          "(II)Z",
          &g_org_webrtc_MediaCodecVideoEncoder_setRates);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(kbps), as_jint(frameRate));
  return ret;
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_dequeueInputBuffer(nullptr);
static jint Java_MediaCodecVideoEncoder_dequeueInputBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "dequeueInputBuffer",
          "()I",
          &g_org_webrtc_MediaCodecVideoEncoder_dequeueInputBuffer);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getIndex(nullptr);
static jint Java_OutputBufferInfo_getIndex(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env),
          "getIndex",
          "()I",
          &g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getIndex);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID>
    g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getBuffer(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_OutputBufferInfo_getBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env),
          "getBuffer",
          "()Ljava/nio/ByteBuffer;",
          &g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getBuffer);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_isKeyFrame(nullptr);
static jboolean Java_OutputBufferInfo_isKeyFrame(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env),
          "isKeyFrame",
          "()Z",
          &g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_isKeyFrame);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID>
    g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getPresentationTimestampUs(nullptr);
static jlong Java_OutputBufferInfo_getPresentationTimestampUs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env),
          "getPresentationTimestampUs",
          "()J",
          &g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getPresentationTimestampUs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_dequeueOutputBuffer(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_MediaCodecVideoEncoder_dequeueOutputBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "dequeueOutputBuffer",
          "()Lorg/webrtc/MediaCodecVideoEncoder$OutputBufferInfo;",
          &g_org_webrtc_MediaCodecVideoEncoder_dequeueOutputBuffer);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_releaseOutputBuffer(nullptr);
static jboolean Java_MediaCodecVideoEncoder_releaseOutputBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper index) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "releaseOutputBuffer",
          "(I)Z",
          &g_org_webrtc_MediaCodecVideoEncoder_releaseOutputBuffer);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(index));
  return ret;
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_getColorFormat(nullptr);
static jint Java_MediaCodecVideoEncoder_getColorFormat(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "getColorFormat",
          "()I",
          &g_org_webrtc_MediaCodecVideoEncoder_getColorFormat);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_org_webrtc_MediaCodecVideoEncoder_isTextureBuffer(nullptr);
static jboolean Java_MediaCodecVideoEncoder_isTextureBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& buffer) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
          "isTextureBuffer",
          "(Lorg/webrtc/VideoFrame$Buffer;)Z",
          &g_org_webrtc_MediaCodecVideoEncoder_isTextureBuffer);

  jboolean ret =
      env->CallStaticBooleanMethod(org_webrtc_MediaCodecVideoEncoder_clazz(env),
          method_id, buffer.obj());
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace jni
}  // namespace  webrtc

#endif  // org_webrtc_MediaCodecVideoEncoder_JNI
