// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     java/lang/Integer

#ifndef java_lang_Integer_JNI
#define java_lang_Integer_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_java_lang_Integer[];
const char kClassPath_java_lang_Integer[] = "java/lang/Integer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_java_lang_Integer_clazz(nullptr);
#ifndef java_lang_Integer_clazz_defined
#define java_lang_Integer_clazz_defined
inline jclass java_lang_Integer_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_java_lang_Integer, &g_java_lang_Integer_clazz);
}
#endif


// Step 2: Constants (optional).

namespace JNI_Integer {

enum Java_Integer_constant_fields {
  BYTES = 4,
  MAX_VALUE = 2147483647,
  MIN_VALUE = -2147483648,
  SIZE = 32,
};


}  // namespace JNI_Integer
// Step 3: Method stubs.
namespace JNI_Integer {


static std::atomic<jmethodID> g_java_lang_Integer_toStringJLS_I_I(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toStringJLS_I_I(JNIEnv* env,
    JniIntWrapper p0,
    JniIntWrapper p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toStringJLS_I_I(JNIEnv* env,
    JniIntWrapper p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "toString",
          "(II)Ljava/lang/String;",
          &g_java_lang_Integer_toStringJLS_I_I);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0), as_jint(p1)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_toUnsignedStringJLS_I_I(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toUnsignedStringJLS_I_I(JNIEnv* env,
    JniIntWrapper p0,
    JniIntWrapper p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toUnsignedStringJLS_I_I(JNIEnv* env,
    JniIntWrapper p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "toUnsignedString",
          "(II)Ljava/lang/String;",
          &g_java_lang_Integer_toUnsignedStringJLS_I_I);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0), as_jint(p1)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_toHexString(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toHexString(JNIEnv* env,
    JniIntWrapper p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toHexString(JNIEnv* env,
    JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "toHexString",
          "(I)Ljava/lang/String;",
          &g_java_lang_Integer_toHexString);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_toOctalString(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toOctalString(JNIEnv* env,
    JniIntWrapper p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toOctalString(JNIEnv* env,
    JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "toOctalString",
          "(I)Ljava/lang/String;",
          &g_java_lang_Integer_toOctalString);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_toBinaryString(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toBinaryString(JNIEnv* env,
    JniIntWrapper p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toBinaryString(JNIEnv* env,
    JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "toBinaryString",
          "(I)Ljava/lang/String;",
          &g_java_lang_Integer_toBinaryString);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_toStringJLS_I(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toStringJLS_I(JNIEnv* env,
    JniIntWrapper p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toStringJLS_I(JNIEnv* env,
    JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "toString",
          "(I)Ljava/lang/String;",
          &g_java_lang_Integer_toStringJLS_I);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_toUnsignedStringJLS_I(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toUnsignedStringJLS_I(JNIEnv* env,
    JniIntWrapper p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toUnsignedStringJLS_I(JNIEnv* env,
    JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "toUnsignedString",
          "(I)Ljava/lang/String;",
          &g_java_lang_Integer_toUnsignedStringJLS_I);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_parseIntI_JLS_I(nullptr);
static jint Java_Integer_parseIntI_JLS_I(JNIEnv* env, const base::android::JavaRef<jstring>& p0,
    JniIntWrapper p1) __attribute__ ((unused));
static jint Java_Integer_parseIntI_JLS_I(JNIEnv* env, const base::android::JavaRef<jstring>& p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "parseInt",
          "(Ljava/lang/String;I)I",
          &g_java_lang_Integer_parseIntI_JLS_I);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, p0.obj(), as_jint(p1));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_parseIntI_JLS(nullptr);
static jint Java_Integer_parseIntI_JLS(JNIEnv* env, const base::android::JavaRef<jstring>& p0)
    __attribute__ ((unused));
static jint Java_Integer_parseIntI_JLS(JNIEnv* env, const base::android::JavaRef<jstring>& p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "parseInt",
          "(Ljava/lang/String;)I",
          &g_java_lang_Integer_parseIntI_JLS);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_parseUnsignedIntI_JLS_I(nullptr);
static jint Java_Integer_parseUnsignedIntI_JLS_I(JNIEnv* env, const base::android::JavaRef<jstring>&
    p0,
    JniIntWrapper p1) __attribute__ ((unused));
static jint Java_Integer_parseUnsignedIntI_JLS_I(JNIEnv* env, const base::android::JavaRef<jstring>&
    p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "parseUnsignedInt",
          "(Ljava/lang/String;I)I",
          &g_java_lang_Integer_parseUnsignedIntI_JLS_I);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, p0.obj(), as_jint(p1));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_parseUnsignedIntI_JLS(nullptr);
static jint Java_Integer_parseUnsignedIntI_JLS(JNIEnv* env, const base::android::JavaRef<jstring>&
    p0) __attribute__ ((unused));
static jint Java_Integer_parseUnsignedIntI_JLS(JNIEnv* env, const base::android::JavaRef<jstring>&
    p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "parseUnsignedInt",
          "(Ljava/lang/String;)I",
          &g_java_lang_Integer_parseUnsignedIntI_JLS);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_valueOfJLI_JLS_I(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_valueOfJLI_JLS_I(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0,
    JniIntWrapper p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_valueOfJLI_JLS_I(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "valueOf",
          "(Ljava/lang/String;I)Ljava/lang/Integer;",
          &g_java_lang_Integer_valueOfJLI_JLS_I);

  jobject ret =
      env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, p0.obj(), as_jint(p1));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_valueOfJLI_JLS(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_valueOfJLI_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_valueOfJLI_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "valueOf",
          "(Ljava/lang/String;)Ljava/lang/Integer;",
          &g_java_lang_Integer_valueOfJLI_JLS);

  jobject ret =
      env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_valueOfJLI_I(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_valueOfJLI_I(JNIEnv* env,
    JniIntWrapper p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_valueOfJLI_I(JNIEnv* env,
    JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "valueOf",
          "(I)Ljava/lang/Integer;",
          &g_java_lang_Integer_valueOfJLI_I);

  jobject ret =
      env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_byteValue(nullptr);
static jbyte Java_Integer_byteValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jbyte Java_Integer_byteValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "byteValue",
          "()B",
          &g_java_lang_Integer_byteValue);

  jbyte ret =
      env->CallByteMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_shortValue(nullptr);
static jshort Java_Integer_shortValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jshort Java_Integer_shortValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "shortValue",
          "()S",
          &g_java_lang_Integer_shortValue);

  jshort ret =
      env->CallShortMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_intValue(nullptr);
static jint Java_Integer_intValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jint Java_Integer_intValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "intValue",
          "()I",
          &g_java_lang_Integer_intValue);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_longValue(nullptr);
static jlong Java_Integer_longValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jlong Java_Integer_longValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "longValue",
          "()J",
          &g_java_lang_Integer_longValue);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_floatValue(nullptr);
static jfloat Java_Integer_floatValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jfloat Java_Integer_floatValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "floatValue",
          "()F",
          &g_java_lang_Integer_floatValue);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_doubleValue(nullptr);
static jdouble Java_Integer_doubleValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jdouble Java_Integer_doubleValue(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "doubleValue",
          "()D",
          &g_java_lang_Integer_doubleValue);

  jdouble ret =
      env->CallDoubleMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_toStringJLS(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toStringJLS(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring> Java_Integer_toStringJLS(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "toString",
          "()Ljava/lang/String;",
          &g_java_lang_Integer_toStringJLS);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_hashCodeI(nullptr);
static jint Java_Integer_hashCodeI(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    __attribute__ ((unused));
static jint Java_Integer_hashCodeI(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "hashCode",
          "()I",
          &g_java_lang_Integer_hashCodeI);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_hashCodeI_I(nullptr);
static jint Java_Integer_hashCodeI_I(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jint Java_Integer_hashCodeI_I(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "hashCode",
          "(I)I",
          &g_java_lang_Integer_hashCodeI_I);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_equals(nullptr);
static jboolean Java_Integer_equals(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static jboolean Java_Integer_equals(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Integer_clazz(env), false);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "equals",
          "(Ljava/lang/Object;)Z",
          &g_java_lang_Integer_equals);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_getIntegerJLI_JLS(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_getIntegerJLI_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_getIntegerJLI_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "getInteger",
          "(Ljava/lang/String;)Ljava/lang/Integer;",
          &g_java_lang_Integer_getIntegerJLI_JLS);

  jobject ret =
      env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_getIntegerJLI_JLS_I(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_getIntegerJLI_JLS_I(JNIEnv* env,
    const base::android::JavaRef<jstring>& p0,
    JniIntWrapper p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_getIntegerJLI_JLS_I(JNIEnv* env,
    const base::android::JavaRef<jstring>& p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "getInteger",
          "(Ljava/lang/String;I)Ljava/lang/Integer;",
          &g_java_lang_Integer_getIntegerJLI_JLS_I);

  jobject ret =
      env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, p0.obj(), as_jint(p1));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_getIntegerJLI_JLS_JLI(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_getIntegerJLI_JLS_JLI(JNIEnv* env,
    const base::android::JavaRef<jstring>& p0,
    const base::android::JavaRef<jobject>& p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_getIntegerJLI_JLS_JLI(JNIEnv* env,
    const base::android::JavaRef<jstring>& p0,
    const base::android::JavaRef<jobject>& p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "getInteger",
          "(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;",
          &g_java_lang_Integer_getIntegerJLI_JLS_JLI);

  jobject ret =
      env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, p0.obj(), p1.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_decode(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_decode(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_decode(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "decode",
          "(Ljava/lang/String;)Ljava/lang/Integer;",
          &g_java_lang_Integer_decode);

  jobject ret =
      env->CallStaticObjectMethod(java_lang_Integer_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_compareToI_JLI(nullptr);
static jint Java_Integer_compareToI_JLI(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static jint Java_Integer_compareToI_JLI(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "compareTo",
          "(Ljava/lang/Integer;)I",
          &g_java_lang_Integer_compareToI_JLI);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_compare(nullptr);
static jint Java_Integer_compare(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__ ((unused));
static jint Java_Integer_compare(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "compare",
          "(II)I",
          &g_java_lang_Integer_compare);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0), as_jint(p1));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_compareUnsigned(nullptr);
static jint Java_Integer_compareUnsigned(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__ ((unused));
static jint Java_Integer_compareUnsigned(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "compareUnsigned",
          "(II)I",
          &g_java_lang_Integer_compareUnsigned);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0), as_jint(p1));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_toUnsignedLong(nullptr);
static jlong Java_Integer_toUnsignedLong(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jlong Java_Integer_toUnsignedLong(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "toUnsignedLong",
          "(I)J",
          &g_java_lang_Integer_toUnsignedLong);

  jlong ret =
      env->CallStaticLongMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_divideUnsigned(nullptr);
static jint Java_Integer_divideUnsigned(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__ ((unused));
static jint Java_Integer_divideUnsigned(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "divideUnsigned",
          "(II)I",
          &g_java_lang_Integer_divideUnsigned);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0), as_jint(p1));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_remainderUnsigned(nullptr);
static jint Java_Integer_remainderUnsigned(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__ ((unused));
static jint Java_Integer_remainderUnsigned(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "remainderUnsigned",
          "(II)I",
          &g_java_lang_Integer_remainderUnsigned);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0), as_jint(p1));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_highestOneBit(nullptr);
static jint Java_Integer_highestOneBit(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jint Java_Integer_highestOneBit(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "highestOneBit",
          "(I)I",
          &g_java_lang_Integer_highestOneBit);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_lowestOneBit(nullptr);
static jint Java_Integer_lowestOneBit(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jint Java_Integer_lowestOneBit(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "lowestOneBit",
          "(I)I",
          &g_java_lang_Integer_lowestOneBit);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_numberOfLeadingZeros(nullptr);
static jint Java_Integer_numberOfLeadingZeros(JNIEnv* env, JniIntWrapper p0) __attribute__
    ((unused));
static jint Java_Integer_numberOfLeadingZeros(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "numberOfLeadingZeros",
          "(I)I",
          &g_java_lang_Integer_numberOfLeadingZeros);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_numberOfTrailingZeros(nullptr);
static jint Java_Integer_numberOfTrailingZeros(JNIEnv* env, JniIntWrapper p0) __attribute__
    ((unused));
static jint Java_Integer_numberOfTrailingZeros(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "numberOfTrailingZeros",
          "(I)I",
          &g_java_lang_Integer_numberOfTrailingZeros);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_bitCount(nullptr);
static jint Java_Integer_bitCount(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jint Java_Integer_bitCount(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "bitCount",
          "(I)I",
          &g_java_lang_Integer_bitCount);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_rotateLeft(nullptr);
static jint Java_Integer_rotateLeft(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__ ((unused));
static jint Java_Integer_rotateLeft(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "rotateLeft",
          "(II)I",
          &g_java_lang_Integer_rotateLeft);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0), as_jint(p1));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_rotateRight(nullptr);
static jint Java_Integer_rotateRight(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__ ((unused));
static jint Java_Integer_rotateRight(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "rotateRight",
          "(II)I",
          &g_java_lang_Integer_rotateRight);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0), as_jint(p1));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_reverse(nullptr);
static jint Java_Integer_reverse(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jint Java_Integer_reverse(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "reverse",
          "(I)I",
          &g_java_lang_Integer_reverse);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_signum(nullptr);
static jint Java_Integer_signum(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jint Java_Integer_signum(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "signum",
          "(I)I",
          &g_java_lang_Integer_signum);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_reverseBytes(nullptr);
static jint Java_Integer_reverseBytes(JNIEnv* env, JniIntWrapper p0) __attribute__ ((unused));
static jint Java_Integer_reverseBytes(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "reverseBytes",
          "(I)I",
          &g_java_lang_Integer_reverseBytes);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_sum(nullptr);
static jint Java_Integer_sum(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__ ((unused));
static jint Java_Integer_sum(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "sum",
          "(II)I",
          &g_java_lang_Integer_sum);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0), as_jint(p1));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_max(nullptr);
static jint Java_Integer_max(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__ ((unused));
static jint Java_Integer_max(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "max",
          "(II)I",
          &g_java_lang_Integer_max);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0), as_jint(p1));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_min(nullptr);
static jint Java_Integer_min(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) __attribute__ ((unused));
static jint Java_Integer_min(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, java_lang_Integer_clazz(env),
          "min",
          "(II)I",
          &g_java_lang_Integer_min);

  jint ret =
      env->CallStaticIntMethod(java_lang_Integer_clazz(env),
          method_id, as_jint(p0), as_jint(p1));
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_compareToI_JLO(nullptr);
static jint Java_Integer_compareToI_JLO(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static jint Java_Integer_compareToI_JLO(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Integer_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "compareTo",
          "(Ljava/lang/Object;)I",
          &g_java_lang_Integer_compareToI_JLO);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID> g_java_lang_Integer_ConstructorJLI_I(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_ConstructorJLI_I(JNIEnv* env,
    JniIntWrapper p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_ConstructorJLI_I(JNIEnv* env,
    JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "<init>",
          "(I)V",
          &g_java_lang_Integer_ConstructorJLI_I);

  jobject ret =
      env->NewObject(java_lang_Integer_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_java_lang_Integer_ConstructorJLI_JLS(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_ConstructorJLI_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Integer_ConstructorJLI_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) {
  CHECK_CLAZZ(env, java_lang_Integer_clazz(env),
      java_lang_Integer_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, java_lang_Integer_clazz(env),
          "<init>",
          "(Ljava/lang/String;)V",
          &g_java_lang_Integer_ConstructorJLI_JLS);

  jobject ret =
      env->NewObject(java_lang_Integer_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace JNI_Integer

#endif  // java_lang_Integer_JNI
