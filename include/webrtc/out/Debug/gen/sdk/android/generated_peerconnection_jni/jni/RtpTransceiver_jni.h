// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/RtpTransceiver

#ifndef org_webrtc_RtpTransceiver_JNI
#define org_webrtc_RtpTransceiver_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_RtpTransceiver_00024RtpTransceiverDirection[];
const char kClassPath_org_webrtc_RtpTransceiver_00024RtpTransceiverDirection[] =
    "org/webrtc/RtpTransceiver$RtpTransceiverDirection";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_RtpTransceiver_00024RtpTransceiverInit[];
const char kClassPath_org_webrtc_RtpTransceiver_00024RtpTransceiverInit[] =
    "org/webrtc/RtpTransceiver$RtpTransceiverInit";

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_RtpTransceiver[];
const char kClassPath_org_webrtc_RtpTransceiver[] = "org/webrtc/RtpTransceiver";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_clazz(nullptr);
#ifndef org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_clazz_defined
#define org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_clazz_defined
inline jclass org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_RtpTransceiver_00024RtpTransceiverDirection,
      &g_org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_webrtc_RtpTransceiver_00024RtpTransceiverInit_clazz(nullptr);
#ifndef org_webrtc_RtpTransceiver_00024RtpTransceiverInit_clazz_defined
#define org_webrtc_RtpTransceiver_00024RtpTransceiverInit_clazz_defined
inline jclass org_webrtc_RtpTransceiver_00024RtpTransceiverInit_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_RtpTransceiver_00024RtpTransceiverInit,
      &g_org_webrtc_RtpTransceiver_00024RtpTransceiverInit_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_webrtc_RtpTransceiver_clazz(nullptr);
#ifndef org_webrtc_RtpTransceiver_clazz_defined
#define org_webrtc_RtpTransceiver_clazz_defined
inline jclass org_webrtc_RtpTransceiver_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_RtpTransceiver,
      &g_org_webrtc_RtpTransceiver_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace  webrtc {
namespace jni {

static base::android::ScopedJavaLocalRef<jobject> JNI_RtpTransceiver_GetMediaType(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong rtpTransceiver);

JNI_GENERATOR_EXPORT jobject Java_org_webrtc_RtpTransceiver_nativeGetMediaType(
    JNIEnv* env,
    jclass jcaller,
    jlong rtpTransceiver) {
  return JNI_RtpTransceiver_GetMediaType(env, base::android::JavaParamRef<jclass>(env, jcaller),
      rtpTransceiver).Release();
}

static base::android::ScopedJavaLocalRef<jstring> JNI_RtpTransceiver_GetMid(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong rtpTransceiver);

JNI_GENERATOR_EXPORT jstring Java_org_webrtc_RtpTransceiver_nativeGetMid(
    JNIEnv* env,
    jclass jcaller,
    jlong rtpTransceiver) {
  return JNI_RtpTransceiver_GetMid(env, base::android::JavaParamRef<jclass>(env, jcaller),
      rtpTransceiver).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_RtpTransceiver_GetSender(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong rtpTransceiver);

JNI_GENERATOR_EXPORT jobject Java_org_webrtc_RtpTransceiver_nativeGetSender(
    JNIEnv* env,
    jclass jcaller,
    jlong rtpTransceiver) {
  return JNI_RtpTransceiver_GetSender(env, base::android::JavaParamRef<jclass>(env, jcaller),
      rtpTransceiver).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_RtpTransceiver_GetReceiver(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong rtpTransceiver);

JNI_GENERATOR_EXPORT jobject Java_org_webrtc_RtpTransceiver_nativeGetReceiver(
    JNIEnv* env,
    jclass jcaller,
    jlong rtpTransceiver) {
  return JNI_RtpTransceiver_GetReceiver(env, base::android::JavaParamRef<jclass>(env, jcaller),
      rtpTransceiver).Release();
}

static jboolean JNI_RtpTransceiver_Stopped(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    jlong rtpTransceiver);

JNI_GENERATOR_EXPORT jboolean Java_org_webrtc_RtpTransceiver_nativeStopped(
    JNIEnv* env,
    jclass jcaller,
    jlong rtpTransceiver) {
  return JNI_RtpTransceiver_Stopped(env, base::android::JavaParamRef<jclass>(env, jcaller),
      rtpTransceiver);
}

static base::android::ScopedJavaLocalRef<jobject> JNI_RtpTransceiver_Direction(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong rtpTransceiver);

JNI_GENERATOR_EXPORT jobject Java_org_webrtc_RtpTransceiver_nativeDirection(
    JNIEnv* env,
    jclass jcaller,
    jlong rtpTransceiver) {
  return JNI_RtpTransceiver_Direction(env, base::android::JavaParamRef<jclass>(env, jcaller),
      rtpTransceiver).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_RtpTransceiver_CurrentDirection(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller,
    jlong rtpTransceiver);

JNI_GENERATOR_EXPORT jobject Java_org_webrtc_RtpTransceiver_nativeCurrentDirection(
    JNIEnv* env,
    jclass jcaller,
    jlong rtpTransceiver) {
  return JNI_RtpTransceiver_CurrentDirection(env, base::android::JavaParamRef<jclass>(env, jcaller),
      rtpTransceiver).Release();
}

static void JNI_RtpTransceiver_Stop(JNIEnv* env, const base::android::JavaParamRef<jclass>& jcaller,
    jlong rtpTransceiver);

JNI_GENERATOR_EXPORT void Java_org_webrtc_RtpTransceiver_nativeStop(
    JNIEnv* env,
    jclass jcaller,
    jlong rtpTransceiver) {
  return JNI_RtpTransceiver_Stop(env, base::android::JavaParamRef<jclass>(env, jcaller),
      rtpTransceiver);
}

static void JNI_RtpTransceiver_SetDirection(JNIEnv* env, const base::android::JavaParamRef<jclass>&
    jcaller,
    jlong rtpTransceiver,
    const base::android::JavaParamRef<jobject>& rtpTransceiverDirection);

JNI_GENERATOR_EXPORT void Java_org_webrtc_RtpTransceiver_nativeSetDirection(
    JNIEnv* env,
    jclass jcaller,
    jlong rtpTransceiver,
    jobject rtpTransceiverDirection) {
  return JNI_RtpTransceiver_SetDirection(env, base::android::JavaParamRef<jclass>(env, jcaller),
      rtpTransceiver, base::android::JavaParamRef<jobject>(env, rtpTransceiverDirection));
}


static std::atomic<jmethodID>
    g_org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_getNativeIndex(nullptr);
static jint Java_RtpTransceiverDirection_getNativeIndex(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_clazz(env),
          "getNativeIndex",
          "()I",
          &g_org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_getNativeIndex);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID>
    g_org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_fromNativeIndex(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_RtpTransceiverDirection_fromNativeIndex(JNIEnv* env, JniIntWrapper nativeIndex) {
  CHECK_CLAZZ(env, org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_clazz(env),
      org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
          env, org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_clazz(env),
          "fromNativeIndex",
          "(I)Lorg/webrtc/RtpTransceiver$RtpTransceiverDirection;",
          &g_org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_fromNativeIndex);

  jobject ret =
      env->CallStaticObjectMethod(org_webrtc_RtpTransceiver_00024RtpTransceiverDirection_clazz(env),
          method_id, as_jint(nativeIndex));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_webrtc_RtpTransceiver_00024RtpTransceiverInit_getDirectionNativeIndex(nullptr);
static jint Java_RtpTransceiverInit_getDirectionNativeIndex(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpTransceiver_00024RtpTransceiverInit_clazz(env), 0);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpTransceiver_00024RtpTransceiverInit_clazz(env),
          "getDirectionNativeIndex",
          "()I",
          &g_org_webrtc_RtpTransceiver_00024RtpTransceiverInit_getDirectionNativeIndex);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static std::atomic<jmethodID>
    g_org_webrtc_RtpTransceiver_00024RtpTransceiverInit_getStreamIds(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_RtpTransceiverInit_getStreamIds(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpTransceiver_00024RtpTransceiverInit_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpTransceiver_00024RtpTransceiverInit_clazz(env),
          "getStreamIds",
          "()Ljava/util/List;",
          &g_org_webrtc_RtpTransceiver_00024RtpTransceiverInit_getStreamIds);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_RtpTransceiver_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_RtpTransceiver_Constructor(JNIEnv* env, jlong
    nativeRtpTransceiver) {
  CHECK_CLAZZ(env, org_webrtc_RtpTransceiver_clazz(env),
      org_webrtc_RtpTransceiver_clazz(env), NULL);
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpTransceiver_clazz(env),
          "<init>",
          "(J)V",
          &g_org_webrtc_RtpTransceiver_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_RtpTransceiver_clazz(env),
          method_id, nativeRtpTransceiver);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_webrtc_RtpTransceiver_dispose(nullptr);
static void Java_RtpTransceiver_dispose(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpTransceiver_clazz(env));
  jmethodID method_id = base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
          env, org_webrtc_RtpTransceiver_clazz(env),
          "dispose",
          "()V",
          &g_org_webrtc_RtpTransceiver_dispose);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

}  // namespace jni
}  // namespace  webrtc

#endif  // org_webrtc_RtpTransceiver_JNI
